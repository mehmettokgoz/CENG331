
    .pos 0
    irmovq stack, %rsp      
    call main      
    halt           
    
    .pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0
    .quad 0
node5:
    .quad 5
    .quad 0 # Remember that 0 is null.
    .quad 0
node11:
    .quad 11
    .quad node8
    .quad 0
node8:
    .quad 8
    .quad 0
    .quad 0
node24:
    .quad 24
    .quad node19
    .quad node40
node19:
    .quad 19
    .quad 0
    .quad 0
node40:
    .quad 40
    .quad 0
    .quad node52
node52:
    .quad 52
    .quad 0
    .quad 0
    
    .pos 0x400
array:
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0



main: 
    xorq %rax, %rax
    irmovq root,%rdi
    irmovq array, %rsi
    irmovq $8, %rdx
    call collect_into     
    ret

collect_into:
    irmovq 16, %r10
    
    subq %r10, %rsp
    andq %rdi, %rdi
    jne valid_node
    jmp unvalid_node

valid_node:
    mrmovq (%rdi), %r9          
    rmmovq %r9, 8(%rsp)         
    mrmovq 16(%rdi), %r8       
    rmmovq %r8, (%rsp)       
    
    mrmovq 8(%rdi), %rdi
    call collect_into


    mrmovq 8(%rsp), %rbx
    andq %rdx, %rdx             # Control if the array is filled 
    jle Done
    rmmovq %rbx, (%rsi)
    
    irmovq $8, %r14
    irmovq $1, %r13
    addq %r14, %rsi

    subq %r13, %rdx
    addq %r13, %rax

    mrmovq (%rsp), %rdi
    call collect_into

unvalid_node:
    irmovq 16, %r10
    addq %r10, %rsp
    ret

Done:
    ret


# Stack starts here at 0x200
    .pos 0x200
stack:

    